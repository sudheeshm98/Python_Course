

Customer Relationship Management System: 
----------------------------------------

This project allows you to manage customer information, including personal 
details, contact information, and sales history. You can use Python to create a console-based interface to add, 
modify, and view customer information in a MySQL database.


Sure, here's a complete implementation of a Customer Relationship Management System using Python and MySQL:

Create a MySQL database: Start by creating a new MySQL database and table to store customer information. 
You can use a tool like MySQL Workbench to create the database schema and table, or use Python to execute 
SQL queries to create the database and table programmatically. Here's an example SQL script to create a customers table:
sql

CREATE DATABASE crm;

USE crm;

CREATE TABLE customers (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255),
    email VARCHAR(255),
    phone VARCHAR(20)
);
Install required packages: Install the mysql-connector-python package using pip to connect to the MySQL database from Python.
bash

pip install mysql-connector-python

Connect to the MySQL database: Use the mysql-connector-python library to connect to the MySQL database from Python. 
You will need to provide the hostname, username, password, and database name as parameters to the connect() function.
python
Copy code
import mysql.connector

conn = mysql.connector.connect(
    host="localhost",
    user="root",
    password="password",
    database="crm"
)
cursor = conn.cursor()
Create a console-based user interface: Use standard Python libraries like input() and print() to create a console-based user 
interface for interacting with the database. You can create functions to handle tasks like adding a new customer, modifying 
an existing customer, and viewing customer information. Here's an example implementation of a console-based user interface:
python

def add_customer():
    name = input("Enter customer name: ")
    email = input("Enter customer email: ")
    phone = input("Enter customer phone: ")
    query = "INSERT INTO customers (name, email, phone) VALUES (%s, %s, %s)"
    values = (name, email, phone)
    cursor.execute(query, values)
    conn.commit()
    print("Customer added successfully.")

def modify_customer():
    customer_id = int(input("Enter customer ID: "))
    name = input("Enter new customer name (leave blank to keep existing name): ")
    email = input("Enter new customer email (leave blank to keep existing email): ")
    phone = input("Enter new customer phone (leave blank to keep existing phone): ")
    query = "UPDATE customers SET "
    values = []
    if name:
        query += "name = %s, "
        values.append(name)
    if email:
        query += "email = %s, "
        values.append(email)
    if phone:
        query += "phone = %s, "
        values.append(phone)
    query = query[:-2] + " WHERE id = %s"
    values.append(customer_id)
    cursor.execute(query, values)
    conn.commit()
    print("Customer modified successfully.")

def view_customer():
    customer_id = int(input("Enter customer ID: "))
    query = "SELECT * FROM customers WHERE id = %s"
    cursor.execute(query, (customer_id,))
    customer = cursor.fetchone()
    if customer:
        print(f"ID: {customer[0]}, Name: {customer[1]}, Email: {customer[2]}, Phone: {customer[3]}")
    else:
        print("Customer not found.")

def view_all_customers():
    query = "SELECT * FROM customers"
    cursor.execute(query)
    customers = cursor.fetchall()
    for customer in customers:
        print(f"ID: {customer[0]}, Name: {customer[1]}, Email: {customer[2]}, Phone: {customer[3]}")

Implement database operations: Use SQL queries to insert,





